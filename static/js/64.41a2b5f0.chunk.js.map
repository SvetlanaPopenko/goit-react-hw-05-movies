{"version":3,"file":"static/js/64.41a2b5f0.chunk.js","mappings":"kTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,IAAMC,EAAU,mCAEVC,EAAgB,mCAAG,2GAAOC,EAAP,+BAAoB,EAAGC,EAAvB,gCACPJ,EAAAA,EAAAA,IAAA,mCACOC,EADP,iBACuBE,GAC5CC,GAH4B,cACxBC,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAQhBC,EAAgB,mCAAG,WAAOC,EAAaL,EAAYC,GAAhC,uFACPJ,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCO,EADnC,iBACuDL,EADvD,wBAErBC,GAH4B,cACxBC,EADwB,yBAKvBA,EAASC,MALc,2CAAH,0DAQhBG,EAAe,mCAAG,WAAOC,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,oBACOT,EADP,mBAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,wDAQfK,EAAe,mCAAG,WAAOD,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,4BACeT,EADf,mBAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,wDAQfM,EAAe,mCAAG,WAAOF,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,4BACeT,EADf,0BAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD,4ICrCfO,EAAc,SAAC,GAAoC,IAAD,IAAjCC,OAAUC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,QAC7C,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAGT,E,8BC0CD,EA1CgB,WACZ,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAyBR,OAvBAa,EAAAA,EAAAA,YAAU,WACL,IAAMC,EAAa,IAAIC,gBACxBJ,GAAa,GACb,IAAMK,EAAgB,mCAAG,WAAMhB,GAAN,iGAENE,EAAAA,EAAAA,IAAgBF,EAAS,CAC1CiB,OAAQH,EAAWG,SAHI,cAEnBrB,EAFmB,OAKvBa,EAAWb,EAAKsB,SALO,kBAMdtB,GANc,gCAQjBuB,QAAQC,IAAR,MARiB,yBAUzBT,GAAa,GAVY,4EAAH,sDAc1B,OADAK,EAAiBhB,GACV,WACLc,EAAWO,OACZ,CACF,GAAE,CAACrB,KAIE,6BACI,SAACsB,EAAA,EAAD,uBACA,0BACKd,EAAQe,KAAI,SAAAnB,GAAM,OACf,SAACD,EAAD,CAA6BC,OAAQA,GAAnBA,EAAOoB,GADV,IAGlBd,IAAa,SAACe,EAAA,EAAD,MACXjB,EAAQkB,SAAQ,qEAIlC,C,oEC7CYJ,EAAQ,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,4BACE,wBAAKD,IACJC,IAGN,C","sources":["components/API/FetchApi.jsx","components/ReviewsItem/ReviewsItem.jsx","components/Reviews/Reviews.jsx","components/Title/Title.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\nexport const getTrendingMovie = async (pageNumber = 1, options) => {\n  const response = await axios.get(\n    `trending/all/day?api_key=${API_KEY}&page=${pageNumber}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async (searchQuery, pageNumber, options) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${pageNumber}&include_adult=false`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n    options\n  );\n  return response.data;\n};\n","export const ReviewsItem = ({ review: { autor, content } }) => {\n  return (\n    <li>\n      <h3>{autor}</h3>\n      <p>{content}</p>\n    </li>\n  );\n};\n","import { getMovieReviews } from \"components/API/FetchApi\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { ReviewsItem } from \"components/ReviewsItem/ReviewsItem\";\nimport { Title } from \"components/Title/Title\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n         const controller = new AbortController();\n        setIsLoading(true);\n        const fetchMovieReview = async movieId => {\n      try {\n        const data = await getMovieReviews(movieId, {\n          signal: controller.signal,\n        });\n          setReviews(data.results);\n            return data;\n              } catch (error) {\n                console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieReview(movieId);\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n    \n\n    return (\n        <main>\n            <Title>Reviews</Title>\n            <ul>\n                {reviews.map(review => (\n                    <ReviewsItem key={review.id} review={review}/>\n                ))}\n                {isLoading && <Loader />}\n                {!!reviews.length||<p>We don`t have reviews for this movie</p>}\n            </ul>\n        </main>\n            )\n};\n\nexport default Reviews;","import PropTypes from 'prop-types';\n\nexport const Title = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\n"],"names":["axios","API_KEY","getTrendingMovie","pageNumber","options","response","data","fetchSearchMovie","searchQuery","getMovieDetails","movieId","getMovieCredits","getMovieReviews","ReviewsItem","review","autor","content","useState","reviews","setReviews","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchMovieReview","signal","results","console","log","abort","Title","map","id","Loader","length","title","children"],"sourceRoot":""}