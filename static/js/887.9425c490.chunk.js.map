{"version":3,"file":"static/js/887.9425c490.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,IAAMC,EAAU,mCAEVC,EAAgB,mCAAG,2GAAOC,EAAP,+BAAoB,EAAGC,EAAvB,gCACPJ,EAAAA,EAAAA,IAAA,mCACOC,EADP,iBACuBE,GAC5CC,GAH4B,cACxBC,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAQhBC,EAAgB,mCAAG,WAAOC,EAAaL,EAAYC,GAAhC,uFACPJ,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCO,EADnC,iBACuDL,EADvD,wBAErBC,GAH4B,cACxBC,EADwB,yBAKvBA,EAASC,MALc,2CAAH,0DAQhBG,EAAe,mCAAG,WAAOC,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,oBACOT,EADP,mBAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,wDAQfK,EAAe,mCAAG,WAAOD,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,4BACeT,EADf,mBAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,wDAQfM,EAAe,mCAAG,WAAOF,EAASN,GAAhB,uFACNJ,EAAAA,EAAAA,IAAA,gBACZU,EADY,4BACeT,EADf,0BAErBG,GAH2B,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,uD,kICrCfO,EAAW,SAAC,GAAiD,IAAD,IAA9CC,KAAQC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,aAClD,OACE,2BACE,gBACEC,IACED,EAAY,yCAAqCA,GAAiB,GAEpEE,IAAKJ,KAEH,4BACI,wBAAKA,KACL,uCAAeC,GAAW,kBAIvC,E,wCC6BD,EArCa,WACT,OAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QAyBR,OAvBAgB,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBACvBN,GAAa,GACb,IAAMO,EAAc,mCAAG,WAAMnB,GAAN,iGAEJC,EAAAA,EAAAA,IAAgBD,EAAS,CAC1CoB,OAAQH,EAAWG,SAHE,cAEjBxB,EAFiB,OAKrBkB,EAAclB,EAAKQ,MALE,kBAMZR,GANY,gCAQfyB,QAAQC,IAAR,MARe,yBAUvBV,GAAa,GAVU,4EAAH,sDAcxB,OADAO,EAAenB,GACR,WACLiB,EAAWM,OACZ,CACF,GAAE,CAACvB,KAGM,6BACJ,SAACwB,EAAA,EAAD,oBACA,0BACKX,EAAWY,KAAI,SAAAC,GAAS,OAAK,SAACvB,EAAD,CAA6BuB,UAAWA,GAAzBA,EAAUC,GAA9B,IACxBhB,IAAa,SAACiB,EAAA,EAAD,SAGzB,C,oECxCYJ,EAAQ,SAAC,GAAyB,IAAvBK,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACE,4BACE,wBAAKD,IACJC,IAGN,C","sources":["components/API/FetchApi.jsx","components/CastItem/CastItem.jsx","components/Cast/Cast.jsx","components/Title/Title.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\nexport const getTrendingMovie = async (pageNumber = 1, options) => {\n  const response = await axios.get(\n    `trending/all/day?api_key=${API_KEY}&page=${pageNumber}`,\n    options\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async (searchQuery, pageNumber, options) => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${pageNumber}&include_adult=false`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async (movieId, options) => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n    options\n  );\n  return response.data;\n};\n","export const CastItem = ({ cast: { name, character, profile_path } }) => {\n  return (\n    <li>\n      <img\n        src={\n          profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : ''\n        }\n        alt={name}\n          />\n          <div>\n              <h2>{name}</h2>\n              <p>Character: {character||'No name' }</p>\n          </div>\n    </li>\n  );\n};\n","import { getMovieCredits } from \"components/API/FetchApi\";\nimport { CastItem } from \"components/CastItem/CastItem\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Title } from \"components/Title/Title\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Cast = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [movieCasts, setMovieCasts] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const controller = new AbortController();\n        setIsLoading(true);\n        const fetchMovieCast = async movieId => {\n      try {\n        const data = await getMovieCredits(movieId, {\n          signal: controller.signal,\n        });\n          setMovieCasts(data.cast);\n            return data;\n              } catch (error) {\n                console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast(movieId);\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n    \n    return (<main>\n        <Title>Cast</Title>\n        <ul>\n            {movieCasts.map(movieCast => (<CastItem key={movieCast.id} movieCast={movieCast} />))}\n            {isLoading && <Loader/>}\n        </ul>\n    </main>)\n};\n\nexport default Cast;","import PropTypes from 'prop-types';\n\nexport const Title = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\n"],"names":["axios","API_KEY","getTrendingMovie","pageNumber","options","response","data","fetchSearchMovie","searchQuery","getMovieDetails","movieId","getMovieCredits","getMovieReviews","CastItem","cast","name","character","profile_path","src","alt","useState","isLoading","setIsLoading","movieCasts","setMovieCasts","useParams","useEffect","controller","AbortController","fetchMovieCast","signal","console","log","abort","Title","map","movieCast","id","Loader","title","children"],"sourceRoot":""}