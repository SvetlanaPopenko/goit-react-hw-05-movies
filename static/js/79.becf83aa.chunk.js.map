{"version":3,"file":"static/js/79.becf83aa.chunk.js","mappings":"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","sources":["components/API/FetchApi.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Title/Title.jsx","components/MovieGalleryItem/MovieGalleryItem.styled.jsx","components/MovieGalleryItem/MovieGalleryItem.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f983fc840eb543faba07dcbe6db19b0b';\n\nexport const getTrendingMovie = async (pageNumber = 1, options) => {\n  try {\n    const response = await axios.get(\n      `trending/all/day?api_key=${API_KEY}&page=${pageNumber}`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovie = async (searchQuery, options) => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async (movieId, options) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCredits = async (movieId, options) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async (movieId, options) => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import styled from \"styled-components\";\n\nexport const Loading = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: #2813e8;\n`;","import { RotatingLines } from 'react-loader-spinner';\nimport { createPortal } from 'react-dom';\nimport { Loading } from './Loader.styled'\n\nconst Spiner = document.querySelector('#loader');\n\nexport const Loader = () => {\n  return createPortal(\n    <Loading>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </Loading>,\n    Spiner\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const Title = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n  \n`\n","import { useLocation } from 'react-router-dom';\nimport { StyledLink } from './MovieGalleryItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieGalleryItem = ({\n  movie: { title, name, poster_path, release_date, id },\n}) => {\n  const location = useLocation();\n  return (\n    <div>\n      <StyledLink to={`movies/${id}`} state={{ from: location }}>\n        <div>\n          <div>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : ''\n              }\n              alt={title || name}\n            />\n          </div>\n          <div>\n            <h2>{title || name}</h2>\n                      <p>Release data : { release_date?.slice(0, 4) || 'not found'}</p>\n          </div>\n        </div>\n      </StyledLink>\n    </div>\n  );\n};\n\nMovieGalleryItem.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    name: PropTypes.string,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    id: PropTypes.number,\n  }),\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { getTrendingMovie } from 'components/API/FetchApi';\nimport { Title } from 'components/Title/Title';\nimport { MovieGalleryItem } from 'components/MovieGalleryItem/MovieGalleryItem';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalPage, setTotalPage] = useState(0);\n\n  const onLoad = () => {\n    setPage(prevPage => prevPage + 1);\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    setIsLoading(true);\n    const fetchMovie = async page => {\n      try {\n        const data = await getTrendingMovie(page, {\n          signal: controller.signal,\n        });\n          console.log(data);\n        setTotalPage(data.total_pages);\n        setMovies(prevMovies => {\n          return page === 1 ? data.results : [...prevMovies, ...data.results];\n        });\n        return data.results;\n      } catch (error) {\n        setMovies([]);\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovie(page);\n    return () => {\n      controller.abort();\n    };\n  }, [page]);\n\n  if (movies) {\n    return (\n      <main>\n        <Title>Trending movies</Title>\n        <div>\n          {!!movies.length &&\n            movies.map(movie => (\n              <MovieGalleryItem key={movie.id} movie={movie}></MovieGalleryItem>\n            ))}\n            </div>\n            {!!movies.length&& page<totalPage&& (<button type='button' onClick={onLoad}>More</button>)}\n        {isLoading && <Loader />}\n      </main>\n    );\n  }\n};\n\nexport default Home;\n"],"names":["axios","API_KEY","getTrendingMovie","pageNumber","options","response","data","console","log","getMovieDetails","movieId","Loading","styled","Spiner","document","querySelector","Loader","createPortal","strokeColor","strokeWidth","animationDuration","width","visible","Title","title","children","StyledLink","NavLink","MovieGalleryItem","movie","name","poster_path","release_date","id","location","useLocation","to","state","from","src","alt","slice","useState","movies","setMovies","page","setPage","isLoading","setIsLoading","totalPage","setTotalPage","useEffect","controller","AbortController","fetchMovie","signal","total_pages","prevMovies","results","abort","length","map","type","onClick","prevPage"],"sourceRoot":""}